# the name of the target operating system
set(CMAKE_SYSTEM_NAME Generic)
set(CMAKE_SYSTEM_PROCESSOR x86)

set(CMAKE_TRY_COMPILE_TARGET_TYPE STATIC_LIBRARY)

set(ARCH_DUPLE $ENV{TARGET})

set(CMAKE_C_COMPILER    $ENV{PREFIX}/bin/$ENV{TARGET}-gcc)
set(CMAKE_CXX_COMPILER  $ENV{PREFIX}/bin/$ENV{TARGET}-g++)
set(CMAKE_AR            $ENV{PREFIX}/bin/$ENV{TARGET}-ar)
set(CMAKE_ASM_COMPILER  $ENV{PREFIX}/bin/$ENV{TARGET}-gcc) # not *-as because of flag -NDEBUG passed to it in release
set(CMAKE_LINKER        $ENV{PREFIX}/bin/$ENV{TARGET}-ld)
set(CMAKE_OBJCOPY       $ENV{PREFIX}/bin/$ENV{TARGET}-objcopy)
set(CMAKE_RANLIB        $ENV{PREFIX}/bin/$ENV{TARGET}-ranlib)
set(CMAKE_SIZE          $ENV{PREFIX}/bin/$ENV{TARGET}-size)
set(CMAKE_STRIP         $ENV{PREFIX}/bin/$ENV{TARGET}-strip)

set(CMAKE_CXX_FLAGS "-ffreestanding -O2 -Wall -Wextra -fno-rtti")
set(CMAKE_C_FLAGS "-ffreestanding -O2 -Wall -Wextra -fno-rtti")

# where is the target environment located
set(CMAKE_FIND_ROOT_PATH $ENV{PREFIX})

# adjust the default behavior of the FIND_XXX() commands:
# search programs in the host environment
set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)

# search headers and libraries in the target environment
set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)
set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)

set(Rust_CARGO_TARGET $ENV{PREFIX}/llvm-target.json)
set(CORROSION_NO_WARN_PARSE_TARGET_TRIPLE_FAILED TRUE)

